# Generated from MyGrammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,287,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,
        15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
        19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,
        23,1,23,1,23,1,24,1,24,1,24,5,24,183,8,24,10,24,12,24,186,9,24,3,
        24,188,8,24,1,25,4,25,191,8,25,11,25,12,25,192,1,25,1,25,5,25,197,
        8,25,10,25,12,25,200,9,25,1,25,1,25,4,25,204,8,25,11,25,12,25,205,
        3,25,208,8,25,1,26,1,26,5,26,212,8,26,10,26,12,26,215,9,26,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,229,
        8,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,
        1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,
        1,43,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,
        4,49,282,8,49,11,49,12,49,283,1,49,1,49,0,0,50,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,
        77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,
        99,50,1,0,6,1,0,49,57,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,0,255,3,0,9,10,13,13,32,32,297,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,1,101,1,0,0,0,
        3,105,1,0,0,0,5,110,1,0,0,0,7,112,1,0,0,0,9,114,1,0,0,0,11,116,1,
        0,0,0,13,118,1,0,0,0,15,120,1,0,0,0,17,123,1,0,0,0,19,126,1,0,0,
        0,21,132,1,0,0,0,23,137,1,0,0,0,25,143,1,0,0,0,27,145,1,0,0,0,29,
        147,1,0,0,0,31,150,1,0,0,0,33,153,1,0,0,0,35,156,1,0,0,0,37,159,
        1,0,0,0,39,162,1,0,0,0,41,166,1,0,0,0,43,170,1,0,0,0,45,173,1,0,
        0,0,47,176,1,0,0,0,49,187,1,0,0,0,51,207,1,0,0,0,53,209,1,0,0,0,
        55,216,1,0,0,0,57,220,1,0,0,0,59,232,1,0,0,0,61,234,1,0,0,0,63,236,
        1,0,0,0,65,238,1,0,0,0,67,240,1,0,0,0,69,242,1,0,0,0,71,244,1,0,
        0,0,73,246,1,0,0,0,75,249,1,0,0,0,77,252,1,0,0,0,79,255,1,0,0,0,
        81,258,1,0,0,0,83,261,1,0,0,0,85,264,1,0,0,0,87,266,1,0,0,0,89,269,
        1,0,0,0,91,272,1,0,0,0,93,274,1,0,0,0,95,276,1,0,0,0,97,278,1,0,
        0,0,99,281,1,0,0,0,101,102,5,105,0,0,102,103,5,110,0,0,103,104,5,
        116,0,0,104,2,1,0,0,0,105,106,5,109,0,0,106,107,5,97,0,0,107,108,
        5,105,0,0,108,109,5,110,0,0,109,4,1,0,0,0,110,111,5,40,0,0,111,6,
        1,0,0,0,112,113,5,41,0,0,113,8,1,0,0,0,114,115,5,123,0,0,115,10,
        1,0,0,0,116,117,5,125,0,0,117,12,1,0,0,0,118,119,5,59,0,0,119,14,
        1,0,0,0,120,121,5,43,0,0,121,122,5,43,0,0,122,16,1,0,0,0,123,124,
        5,45,0,0,124,125,5,45,0,0,125,18,1,0,0,0,126,127,5,102,0,0,127,128,
        5,108,0,0,128,129,5,111,0,0,129,130,5,97,0,0,130,131,5,116,0,0,131,
        20,1,0,0,0,132,133,5,99,0,0,133,134,5,104,0,0,134,135,5,97,0,0,135,
        136,5,114,0,0,136,22,1,0,0,0,137,138,5,99,0,0,138,139,5,111,0,0,
        139,140,5,110,0,0,140,141,5,115,0,0,141,142,5,116,0,0,142,24,1,0,
        0,0,143,144,5,44,0,0,144,26,1,0,0,0,145,146,5,61,0,0,146,28,1,0,
        0,0,147,148,5,43,0,0,148,149,5,61,0,0,149,30,1,0,0,0,150,151,5,45,
        0,0,151,152,5,61,0,0,152,32,1,0,0,0,153,154,5,42,0,0,154,155,5,61,
        0,0,155,34,1,0,0,0,156,157,5,47,0,0,157,158,5,61,0,0,158,36,1,0,
        0,0,159,160,5,37,0,0,160,161,5,61,0,0,161,38,1,0,0,0,162,163,5,60,
        0,0,163,164,5,60,0,0,164,165,5,61,0,0,165,40,1,0,0,0,166,167,5,62,
        0,0,167,168,5,62,0,0,168,169,5,61,0,0,169,42,1,0,0,0,170,171,5,38,
        0,0,171,172,5,61,0,0,172,44,1,0,0,0,173,174,5,94,0,0,174,175,5,61,
        0,0,175,46,1,0,0,0,176,177,5,124,0,0,177,178,5,61,0,0,178,48,1,0,
        0,0,179,188,5,48,0,0,180,184,7,0,0,0,181,183,7,1,0,0,182,181,1,0,
        0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,188,1,0,
        0,0,186,184,1,0,0,0,187,179,1,0,0,0,187,180,1,0,0,0,188,50,1,0,0,
        0,189,191,7,1,0,0,190,189,1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,
        0,192,193,1,0,0,0,193,194,1,0,0,0,194,198,5,46,0,0,195,197,7,1,0,
        0,196,195,1,0,0,0,197,200,1,0,0,0,198,196,1,0,0,0,198,199,1,0,0,
        0,199,208,1,0,0,0,200,198,1,0,0,0,201,203,5,46,0,0,202,204,7,1,0,
        0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,
        0,206,208,1,0,0,0,207,190,1,0,0,0,207,201,1,0,0,0,208,52,1,0,0,0,
        209,213,7,2,0,0,210,212,7,3,0,0,211,210,1,0,0,0,212,215,1,0,0,0,
        213,211,1,0,0,0,213,214,1,0,0,0,214,54,1,0,0,0,215,213,1,0,0,0,216,
        217,5,39,0,0,217,218,7,4,0,0,218,219,5,39,0,0,219,56,1,0,0,0,220,
        228,5,39,0,0,221,222,5,92,0,0,222,229,5,110,0,0,223,224,5,92,0,0,
        224,229,5,116,0,0,225,226,5,92,0,0,226,229,5,48,0,0,227,229,9,0,
        0,0,228,221,1,0,0,0,228,223,1,0,0,0,228,225,1,0,0,0,228,227,1,0,
        0,0,229,230,1,0,0,0,230,231,5,39,0,0,231,58,1,0,0,0,232,233,5,43,
        0,0,233,60,1,0,0,0,234,235,5,45,0,0,235,62,1,0,0,0,236,237,5,42,
        0,0,237,64,1,0,0,0,238,239,5,47,0,0,239,66,1,0,0,0,240,241,5,37,
        0,0,241,68,1,0,0,0,242,243,5,62,0,0,243,70,1,0,0,0,244,245,5,60,
        0,0,245,72,1,0,0,0,246,247,5,61,0,0,247,248,5,61,0,0,248,74,1,0,
        0,0,249,250,5,62,0,0,250,251,5,61,0,0,251,76,1,0,0,0,252,253,5,60,
        0,0,253,254,5,61,0,0,254,78,1,0,0,0,255,256,5,33,0,0,256,257,5,61,
        0,0,257,80,1,0,0,0,258,259,5,38,0,0,259,260,5,38,0,0,260,82,1,0,
        0,0,261,262,5,124,0,0,262,263,5,124,0,0,263,84,1,0,0,0,264,265,5,
        33,0,0,265,86,1,0,0,0,266,267,5,60,0,0,267,268,5,60,0,0,268,88,1,
        0,0,0,269,270,5,62,0,0,270,271,5,62,0,0,271,90,1,0,0,0,272,273,5,
        38,0,0,273,92,1,0,0,0,274,275,5,124,0,0,275,94,1,0,0,0,276,277,5,
        94,0,0,277,96,1,0,0,0,278,279,5,126,0,0,279,98,1,0,0,0,280,282,7,
        5,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,1,
        0,0,0,284,285,1,0,0,0,285,286,6,49,0,0,286,100,1,0,0,0,10,0,184,
        187,192,198,205,207,213,228,283,1,6,0,0
    ]

class MyGrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    NUMBER = 25
    FLOAT = 26
    ID = 27
    CHAR = 28
    CHAR_ESC = 29
    PLUS = 30
    MINUS = 31
    MUL = 32
    DIV = 33
    MOD = 34
    GT = 35
    LT = 36
    EQ = 37
    GE = 38
    LE = 39
    NE = 40
    AND = 41
    OR = 42
    NOT = 43
    LSHIFT = 44
    RSHIFT = 45
    BITAND = 46
    BITOR = 47
    BITXOR = 48
    BITNOT = 49
    WS = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'main'", "'('", "')'", "'{'", "'}'", "';'", "'++'", 
            "'--'", "'float'", "'char'", "'const'", "','", "'='", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "'<<='", "'>>='", "'&='", "'^='", 
            "'|='", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", "'=='", 
            "'>='", "'<='", "'!='", "'&&'", "'||'", "'!'", "'<<'", "'>>'", 
            "'&'", "'|'", "'^'", "'~'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "FLOAT", "ID", "CHAR", "CHAR_ESC", "PLUS", "MINUS", 
            "MUL", "DIV", "MOD", "GT", "LT", "EQ", "GE", "LE", "NE", "AND", 
            "OR", "NOT", "LSHIFT", "RSHIFT", "BITAND", "BITOR", "BITXOR", 
            "BITNOT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "NUMBER", "FLOAT", 
                  "ID", "CHAR", "CHAR_ESC", "PLUS", "MINUS", "MUL", "DIV", 
                  "MOD", "GT", "LT", "EQ", "GE", "LE", "NE", "AND", "OR", 
                  "NOT", "LSHIFT", "RSHIFT", "BITAND", "BITOR", "BITXOR", 
                  "BITNOT", "WS" ]

    grammarFileName = "MyGrammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


