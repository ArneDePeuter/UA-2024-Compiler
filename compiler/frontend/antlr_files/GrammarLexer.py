# Generated from Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,122,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,
        1,1,1,2,1,2,1,3,1,3,1,3,5,3,61,8,3,10,3,12,3,64,9,3,3,3,66,8,3,1,
        4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,
        1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,4,24,117,8,24,11,24,12,24,118,
        1,24,1,24,0,0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,1,0,3,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,
        32,124,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,1,0,0,0,7,65,1,0,0,0,9,67,1,0,0,
        0,11,69,1,0,0,0,13,71,1,0,0,0,15,73,1,0,0,0,17,75,1,0,0,0,19,77,
        1,0,0,0,21,79,1,0,0,0,23,81,1,0,0,0,25,84,1,0,0,0,27,87,1,0,0,0,
        29,90,1,0,0,0,31,93,1,0,0,0,33,96,1,0,0,0,35,99,1,0,0,0,37,101,1,
        0,0,0,39,104,1,0,0,0,41,107,1,0,0,0,43,109,1,0,0,0,45,111,1,0,0,
        0,47,113,1,0,0,0,49,116,1,0,0,0,51,52,5,59,0,0,52,2,1,0,0,0,53,54,
        5,40,0,0,54,4,1,0,0,0,55,56,5,41,0,0,56,6,1,0,0,0,57,66,5,48,0,0,
        58,62,7,0,0,0,59,61,7,1,0,0,60,59,1,0,0,0,61,64,1,0,0,0,62,60,1,
        0,0,0,62,63,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,65,57,1,0,0,0,65,
        58,1,0,0,0,66,8,1,0,0,0,67,68,5,43,0,0,68,10,1,0,0,0,69,70,5,45,
        0,0,70,12,1,0,0,0,71,72,5,42,0,0,72,14,1,0,0,0,73,74,5,47,0,0,74,
        16,1,0,0,0,75,76,5,37,0,0,76,18,1,0,0,0,77,78,5,62,0,0,78,20,1,0,
        0,0,79,80,5,60,0,0,80,22,1,0,0,0,81,82,5,61,0,0,82,83,5,61,0,0,83,
        24,1,0,0,0,84,85,5,62,0,0,85,86,5,61,0,0,86,26,1,0,0,0,87,88,5,60,
        0,0,88,89,5,61,0,0,89,28,1,0,0,0,90,91,5,33,0,0,91,92,5,61,0,0,92,
        30,1,0,0,0,93,94,5,38,0,0,94,95,5,38,0,0,95,32,1,0,0,0,96,97,5,124,
        0,0,97,98,5,124,0,0,98,34,1,0,0,0,99,100,5,33,0,0,100,36,1,0,0,0,
        101,102,5,60,0,0,102,103,5,60,0,0,103,38,1,0,0,0,104,105,5,62,0,
        0,105,106,5,62,0,0,106,40,1,0,0,0,107,108,5,38,0,0,108,42,1,0,0,
        0,109,110,5,124,0,0,110,44,1,0,0,0,111,112,5,94,0,0,112,46,1,0,0,
        0,113,114,5,126,0,0,114,48,1,0,0,0,115,117,7,2,0,0,116,115,1,0,0,
        0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,
        0,120,121,6,24,0,0,121,50,1,0,0,0,4,0,62,65,118,1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    NUMBER = 4
    PLUS = 5
    MINUS = 6
    MUL = 7
    DIV = 8
    MOD = 9
    GT = 10
    LT = 11
    EQ = 12
    GE = 13
    LE = 14
    NE = 15
    AND = 16
    OR = 17
    NOT = 18
    LSHIFT = 19
    RSHIFT = 20
    BITAND = 21
    BITOR = 22
    BITXOR = 23
    BITNOT = 24
    WS = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'%'", "'>'", 
            "'<'", "'=='", "'>='", "'<='", "'!='", "'&&'", "'||'", "'!'", 
            "'<<'", "'>>'", "'&'", "'|'", "'^'", "'~'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "PLUS", "MINUS", "MUL", "DIV", "MOD", "GT", "LT", 
            "EQ", "GE", "LE", "NE", "AND", "OR", "NOT", "LSHIFT", "RSHIFT", 
            "BITAND", "BITOR", "BITXOR", "BITNOT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "NUMBER", "PLUS", "MINUS", "MUL", 
                  "DIV", "MOD", "GT", "LT", "EQ", "GE", "LE", "NE", "AND", 
                  "OR", "NOT", "LSHIFT", "RSHIFT", "BITAND", "BITOR", "BITXOR", 
                  "BITNOT", "WS" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


