# Generated from Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,62,412,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,4,0,127,8,0,11,0,12,0,128,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,3,14,180,8,14,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,
        5,28,264,8,28,10,28,12,28,267,9,28,1,29,1,29,1,29,3,29,272,8,29,
        1,30,1,30,1,30,5,30,277,8,30,10,30,12,30,280,9,30,3,30,282,8,30,
        1,31,4,31,285,8,31,11,31,12,31,286,1,31,1,31,5,31,291,8,31,10,31,
        12,31,294,9,31,1,31,1,31,4,31,298,8,31,11,31,12,31,299,3,31,302,
        8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,
        315,8,33,3,33,317,8,33,1,34,1,34,4,34,321,8,34,11,34,12,34,322,1,
        34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,
        40,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,
        45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,
        50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,
        55,1,56,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,3,59,387,8,59,1,
        60,1,60,1,60,1,60,5,60,393,8,60,10,60,12,60,396,9,60,1,60,3,60,399,
        8,60,1,61,1,61,1,61,1,61,5,61,405,8,61,10,61,12,61,408,9,61,1,61,
        1,61,1,61,2,394,406,0,62,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,
        85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,
        53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,
        1,0,7,3,0,9,10,13,13,32,32,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,1,0,49,57,1,0,48,57,4,0,10,10,13,13,39,39,92,92,1,1,
        10,10,431,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,
        109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,
        0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,1,126,1,0,0,0,3,132,
        1,0,0,0,5,134,1,0,0,0,7,136,1,0,0,0,9,138,1,0,0,0,11,140,1,0,0,0,
        13,142,1,0,0,0,15,144,1,0,0,0,17,146,1,0,0,0,19,148,1,0,0,0,21,150,
        1,0,0,0,23,152,1,0,0,0,25,154,1,0,0,0,27,157,1,0,0,0,29,179,1,0,
        0,0,31,181,1,0,0,0,33,188,1,0,0,0,35,196,1,0,0,0,37,201,1,0,0,0,
        39,208,1,0,0,0,41,213,1,0,0,0,43,221,1,0,0,0,45,224,1,0,0,0,47,229,
        1,0,0,0,49,235,1,0,0,0,51,242,1,0,0,0,53,251,1,0,0,0,55,257,1,0,
        0,0,57,261,1,0,0,0,59,271,1,0,0,0,61,281,1,0,0,0,63,301,1,0,0,0,
        65,303,1,0,0,0,67,316,1,0,0,0,69,318,1,0,0,0,71,326,1,0,0,0,73,328,
        1,0,0,0,75,330,1,0,0,0,77,332,1,0,0,0,79,334,1,0,0,0,81,337,1,0,
        0,0,83,340,1,0,0,0,85,342,1,0,0,0,87,345,1,0,0,0,89,348,1,0,0,0,
        91,350,1,0,0,0,93,352,1,0,0,0,95,354,1,0,0,0,97,356,1,0,0,0,99,358,
        1,0,0,0,101,361,1,0,0,0,103,364,1,0,0,0,105,366,1,0,0,0,107,368,
        1,0,0,0,109,371,1,0,0,0,111,374,1,0,0,0,113,377,1,0,0,0,115,380,
        1,0,0,0,117,382,1,0,0,0,119,386,1,0,0,0,121,388,1,0,0,0,123,400,
        1,0,0,0,125,127,7,0,0,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,
        1,0,0,0,128,129,1,0,0,0,129,130,1,0,0,0,130,131,6,0,0,0,131,2,1,
        0,0,0,132,133,5,40,0,0,133,4,1,0,0,0,134,135,5,41,0,0,135,6,1,0,
        0,0,136,137,5,123,0,0,137,8,1,0,0,0,138,139,5,125,0,0,139,10,1,0,
        0,0,140,141,5,91,0,0,141,12,1,0,0,0,142,143,5,93,0,0,143,14,1,0,
        0,0,144,145,5,44,0,0,145,16,1,0,0,0,146,147,5,58,0,0,147,18,1,0,
        0,0,148,149,5,61,0,0,149,20,1,0,0,0,150,151,5,59,0,0,151,22,1,0,
        0,0,152,153,5,46,0,0,153,24,1,0,0,0,154,155,5,45,0,0,155,156,5,62,
        0,0,156,26,1,0,0,0,157,158,5,99,0,0,158,159,5,111,0,0,159,160,5,
        110,0,0,160,161,5,115,0,0,161,162,5,116,0,0,162,28,1,0,0,0,163,164,
        5,105,0,0,164,165,5,110,0,0,165,180,5,116,0,0,166,167,5,102,0,0,
        167,168,5,108,0,0,168,169,5,111,0,0,169,170,5,97,0,0,170,180,5,116,
        0,0,171,172,5,99,0,0,172,173,5,104,0,0,173,174,5,97,0,0,174,180,
        5,114,0,0,175,176,5,118,0,0,176,177,5,111,0,0,177,178,5,105,0,0,
        178,180,5,100,0,0,179,163,1,0,0,0,179,166,1,0,0,0,179,171,1,0,0,
        0,179,175,1,0,0,0,180,30,1,0,0,0,181,182,5,115,0,0,182,183,5,116,
        0,0,183,184,5,114,0,0,184,185,5,117,0,0,185,186,5,99,0,0,186,187,
        5,116,0,0,187,32,1,0,0,0,188,189,5,116,0,0,189,190,5,121,0,0,190,
        191,5,112,0,0,191,192,5,101,0,0,192,193,5,100,0,0,193,194,5,101,
        0,0,194,195,5,102,0,0,195,34,1,0,0,0,196,197,5,101,0,0,197,198,5,
        110,0,0,198,199,5,117,0,0,199,200,5,109,0,0,200,36,1,0,0,0,201,202,
        5,115,0,0,202,203,5,119,0,0,203,204,5,105,0,0,204,205,5,116,0,0,
        205,206,5,99,0,0,206,207,5,104,0,0,207,38,1,0,0,0,208,209,5,99,0,
        0,209,210,5,97,0,0,210,211,5,115,0,0,211,212,5,101,0,0,212,40,1,
        0,0,0,213,214,5,100,0,0,214,215,5,101,0,0,215,216,5,102,0,0,216,
        217,5,97,0,0,217,218,5,117,0,0,218,219,5,108,0,0,219,220,5,116,0,
        0,220,42,1,0,0,0,221,222,5,105,0,0,222,223,5,102,0,0,223,44,1,0,
        0,0,224,225,5,101,0,0,225,226,5,108,0,0,226,227,5,115,0,0,227,228,
        5,101,0,0,228,46,1,0,0,0,229,230,5,98,0,0,230,231,5,114,0,0,231,
        232,5,101,0,0,232,233,5,97,0,0,233,234,5,107,0,0,234,48,1,0,0,0,
        235,236,5,114,0,0,236,237,5,101,0,0,237,238,5,116,0,0,238,239,5,
        117,0,0,239,240,5,114,0,0,240,241,5,110,0,0,241,50,1,0,0,0,242,243,
        5,99,0,0,243,244,5,111,0,0,244,245,5,110,0,0,245,246,5,116,0,0,246,
        247,5,105,0,0,247,248,5,110,0,0,248,249,5,117,0,0,249,250,5,101,
        0,0,250,52,1,0,0,0,251,252,5,119,0,0,252,253,5,104,0,0,253,254,5,
        105,0,0,254,255,5,108,0,0,255,256,5,101,0,0,256,54,1,0,0,0,257,258,
        5,102,0,0,258,259,5,111,0,0,259,260,5,114,0,0,260,56,1,0,0,0,261,
        265,7,1,0,0,262,264,7,2,0,0,263,262,1,0,0,0,264,267,1,0,0,0,265,
        263,1,0,0,0,265,266,1,0,0,0,266,58,1,0,0,0,267,265,1,0,0,0,268,272,
        3,61,30,0,269,272,3,63,31,0,270,272,3,65,32,0,271,268,1,0,0,0,271,
        269,1,0,0,0,271,270,1,0,0,0,272,60,1,0,0,0,273,282,5,48,0,0,274,
        278,7,3,0,0,275,277,7,4,0,0,276,275,1,0,0,0,277,280,1,0,0,0,278,
        276,1,0,0,0,278,279,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,281,
        273,1,0,0,0,281,274,1,0,0,0,282,62,1,0,0,0,283,285,7,4,0,0,284,283,
        1,0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,288,
        1,0,0,0,288,292,5,46,0,0,289,291,7,4,0,0,290,289,1,0,0,0,291,294,
        1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,302,1,0,0,0,294,292,
        1,0,0,0,295,297,5,46,0,0,296,298,7,4,0,0,297,296,1,0,0,0,298,299,
        1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,284,
        1,0,0,0,301,295,1,0,0,0,302,64,1,0,0,0,303,304,5,39,0,0,304,305,
        3,67,33,0,305,306,5,39,0,0,306,66,1,0,0,0,307,317,8,5,0,0,308,309,
        5,92,0,0,309,315,5,110,0,0,310,311,5,92,0,0,311,315,5,116,0,0,312,
        313,5,92,0,0,313,315,5,48,0,0,314,308,1,0,0,0,314,310,1,0,0,0,314,
        312,1,0,0,0,315,317,1,0,0,0,316,307,1,0,0,0,316,314,1,0,0,0,317,
        68,1,0,0,0,318,320,5,34,0,0,319,321,3,67,33,0,320,319,1,0,0,0,321,
        322,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,1,0,0,0,324,
        325,5,34,0,0,325,70,1,0,0,0,326,327,5,38,0,0,327,72,1,0,0,0,328,
        329,5,124,0,0,329,74,1,0,0,0,330,331,5,94,0,0,331,76,1,0,0,0,332,
        333,5,126,0,0,333,78,1,0,0,0,334,335,5,38,0,0,335,336,5,38,0,0,336,
        80,1,0,0,0,337,338,5,124,0,0,338,339,5,124,0,0,339,82,1,0,0,0,340,
        341,5,33,0,0,341,84,1,0,0,0,342,343,5,60,0,0,343,344,5,60,0,0,344,
        86,1,0,0,0,345,346,5,62,0,0,346,347,5,62,0,0,347,88,1,0,0,0,348,
        349,5,43,0,0,349,90,1,0,0,0,350,351,5,45,0,0,351,92,1,0,0,0,352,
        353,5,42,0,0,353,94,1,0,0,0,354,355,5,47,0,0,355,96,1,0,0,0,356,
        357,5,37,0,0,357,98,1,0,0,0,358,359,5,61,0,0,359,360,5,61,0,0,360,
        100,1,0,0,0,361,362,5,33,0,0,362,363,5,61,0,0,363,102,1,0,0,0,364,
        365,5,60,0,0,365,104,1,0,0,0,366,367,5,62,0,0,367,106,1,0,0,0,368,
        369,5,60,0,0,369,370,5,61,0,0,370,108,1,0,0,0,371,372,5,62,0,0,372,
        373,5,61,0,0,373,110,1,0,0,0,374,375,5,43,0,0,375,376,5,43,0,0,376,
        112,1,0,0,0,377,378,5,45,0,0,378,379,5,45,0,0,379,114,1,0,0,0,380,
        381,3,71,35,0,381,116,1,0,0,0,382,383,3,93,46,0,383,118,1,0,0,0,
        384,387,3,121,60,0,385,387,3,123,61,0,386,384,1,0,0,0,386,385,1,
        0,0,0,387,120,1,0,0,0,388,389,5,47,0,0,389,390,5,47,0,0,390,394,
        1,0,0,0,391,393,9,0,0,0,392,391,1,0,0,0,393,396,1,0,0,0,394,395,
        1,0,0,0,394,392,1,0,0,0,395,398,1,0,0,0,396,394,1,0,0,0,397,399,
        7,6,0,0,398,397,1,0,0,0,399,122,1,0,0,0,400,401,5,47,0,0,401,402,
        5,42,0,0,402,406,1,0,0,0,403,405,9,0,0,0,404,403,1,0,0,0,405,408,
        1,0,0,0,406,407,1,0,0,0,406,404,1,0,0,0,407,409,1,0,0,0,408,406,
        1,0,0,0,409,410,5,42,0,0,410,411,5,47,0,0,411,124,1,0,0,0,18,0,128,
        179,265,271,278,281,286,292,299,301,314,316,322,386,394,398,406,
        1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Ws = 1
    OpenParan = 2
    CloseParan = 3
    OpenBrace = 4
    CloseBrace = 5
    OpenBracket = 6
    CloseBracket = 7
    Comma = 8
    Colon = 9
    Equals = 10
    Delimiter = 11
    DotOp = 12
    ArrowOp = 13
    Const = 14
    BaseType = 15
    Struct = 16
    Typedef = 17
    Enum = 18
    Switch = 19
    Case = 20
    Default = 21
    If = 22
    Else = 23
    Break = 24
    Return = 25
    Continue = 26
    While = 27
    For = 28
    Identifier = 29
    Constant = 30
    Int = 31
    Float = 32
    Char = 33
    CharContent = 34
    StringLiteral = 35
    AndBit = 36
    OrBit = 37
    XorBit = 38
    NotBit = 39
    AndLogical = 40
    OrLogical = 41
    NotLogical = 42
    ShiftLeft = 43
    ShiftRight = 44
    Plus = 45
    Minus = 46
    Multiply = 47
    Divide = 48
    Modulus = 49
    Equal = 50
    NotEqual = 51
    LessThan = 52
    GreaterThan = 53
    LessThanEqual = 54
    GreaterThanEqual = 55
    PlusPlus = 56
    MinusMinus = 57
    AddressOf = 58
    Dereference = 59
    Comment = 60
    SingleLineComment = 61
    MultiLineComment = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "':'", "'='", 
            "';'", "'.'", "'->'", "'const'", "'struct'", "'typedef'", "'enum'", 
            "'switch'", "'case'", "'default'", "'if'", "'else'", "'break'", 
            "'return'", "'continue'", "'while'", "'for'", "'&'", "'|'", 
            "'^'", "'~'", "'&&'", "'||'", "'!'", "'<<'", "'>>'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", "'<'", "'>'", "'<='", 
            "'>='", "'++'", "'--'" ]

    symbolicNames = [ "<INVALID>",
            "Ws", "OpenParan", "CloseParan", "OpenBrace", "CloseBrace", 
            "OpenBracket", "CloseBracket", "Comma", "Colon", "Equals", "Delimiter", 
            "DotOp", "ArrowOp", "Const", "BaseType", "Struct", "Typedef", 
            "Enum", "Switch", "Case", "Default", "If", "Else", "Break", 
            "Return", "Continue", "While", "For", "Identifier", "Constant", 
            "Int", "Float", "Char", "CharContent", "StringLiteral", "AndBit", 
            "OrBit", "XorBit", "NotBit", "AndLogical", "OrLogical", "NotLogical", 
            "ShiftLeft", "ShiftRight", "Plus", "Minus", "Multiply", "Divide", 
            "Modulus", "Equal", "NotEqual", "LessThan", "GreaterThan", "LessThanEqual", 
            "GreaterThanEqual", "PlusPlus", "MinusMinus", "AddressOf", "Dereference", 
            "Comment", "SingleLineComment", "MultiLineComment" ]

    ruleNames = [ "Ws", "OpenParan", "CloseParan", "OpenBrace", "CloseBrace", 
                  "OpenBracket", "CloseBracket", "Comma", "Colon", "Equals", 
                  "Delimiter", "DotOp", "ArrowOp", "Const", "BaseType", 
                  "Struct", "Typedef", "Enum", "Switch", "Case", "Default", 
                  "If", "Else", "Break", "Return", "Continue", "While", 
                  "For", "Identifier", "Constant", "Int", "Float", "Char", 
                  "CharContent", "StringLiteral", "AndBit", "OrBit", "XorBit", 
                  "NotBit", "AndLogical", "OrLogical", "NotLogical", "ShiftLeft", 
                  "ShiftRight", "Plus", "Minus", "Multiply", "Divide", "Modulus", 
                  "Equal", "NotEqual", "LessThan", "GreaterThan", "LessThanEqual", 
                  "GreaterThanEqual", "PlusPlus", "MinusMinus", "AddressOf", 
                  "Dereference", "Comment", "SingleLineComment", "MultiLineComment" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


