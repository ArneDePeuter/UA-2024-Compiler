# Generated from Grammar.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,70,511,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,
        8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,
        15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,
        18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,
        21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,
        29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,
        31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,
        34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,
        36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,
        41,1,41,1,41,5,41,323,8,41,10,41,12,41,326,9,41,3,41,328,8,41,1,
        42,4,42,331,8,42,11,42,12,42,332,1,42,1,42,5,42,337,8,42,10,42,12,
        42,340,9,42,1,42,1,42,4,42,344,8,42,11,42,12,42,345,3,42,348,8,42,
        1,43,1,43,5,43,352,8,43,10,43,12,43,355,9,43,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,369,8,45,1,45,1,45,
        1,46,1,46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,
        1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,
        1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,61,1,61,
        1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,66,1,66,
        5,66,425,8,66,10,66,12,66,428,9,66,1,66,1,66,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,445,8,67,1,68,
        1,68,5,68,449,8,68,10,68,12,68,452,9,68,1,68,5,68,455,8,68,10,68,
        12,68,458,9,68,1,68,1,68,4,68,462,8,68,11,68,12,68,463,3,68,466,
        8,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,3,69,475,8,69,3,69,477,8,
        69,1,70,1,70,1,71,4,71,482,8,71,11,71,12,71,483,1,71,1,71,1,72,1,
        72,1,72,1,72,5,72,492,8,72,10,72,12,72,495,9,72,1,72,3,72,498,8,
        72,1,73,1,73,1,73,1,73,5,73,504,8,73,10,73,12,73,507,9,73,1,73,1,
        73,1,73,2,493,505,0,74,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,
        43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,
        107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,125,
        63,127,64,129,65,131,66,133,67,135,0,137,0,139,0,141,0,143,68,145,
        69,147,70,1,0,14,1,0,49,57,1,0,48,57,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,1,0,0,255,3,0,34,34,37,37,92,92,7,0,34,
        34,92,92,98,98,102,102,110,110,114,114,116,116,2,0,35,35,43,48,11,
        0,37,37,65,65,69,71,88,88,97,97,99,103,105,105,110,112,115,115,117,
        117,120,120,1,0,48,51,1,0,48,55,3,0,48,57,65,70,97,102,3,0,9,10,
        13,13,32,32,1,1,10,10,531,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
        1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,
        1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,
        1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,
        107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,
        0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,
        1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,133,1,0,0,0,
        0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,1,149,1,0,0,0,3,154,1,
        0,0,0,5,156,1,0,0,0,7,158,1,0,0,0,9,160,1,0,0,0,11,162,1,0,0,0,13,
        164,1,0,0,0,15,166,1,0,0,0,17,173,1,0,0,0,19,179,1,0,0,0,21,181,
        1,0,0,0,23,183,1,0,0,0,25,185,1,0,0,0,27,193,1,0,0,0,29,196,1,0,
        0,0,31,199,1,0,0,0,33,203,1,0,0,0,35,209,1,0,0,0,37,214,1,0,0,0,
        39,219,1,0,0,0,41,225,1,0,0,0,43,228,1,0,0,0,45,231,1,0,0,0,47,234,
        1,0,0,0,49,237,1,0,0,0,51,240,1,0,0,0,53,244,1,0,0,0,55,248,1,0,
        0,0,57,251,1,0,0,0,59,254,1,0,0,0,61,257,1,0,0,0,63,264,1,0,0,0,
        65,269,1,0,0,0,67,277,1,0,0,0,69,280,1,0,0,0,71,285,1,0,0,0,73,291,
        1,0,0,0,75,298,1,0,0,0,77,307,1,0,0,0,79,313,1,0,0,0,81,317,1,0,
        0,0,83,327,1,0,0,0,85,347,1,0,0,0,87,349,1,0,0,0,89,356,1,0,0,0,
        91,360,1,0,0,0,93,372,1,0,0,0,95,374,1,0,0,0,97,376,1,0,0,0,99,378,
        1,0,0,0,101,380,1,0,0,0,103,382,1,0,0,0,105,384,1,0,0,0,107,386,
        1,0,0,0,109,389,1,0,0,0,111,392,1,0,0,0,113,395,1,0,0,0,115,398,
        1,0,0,0,117,401,1,0,0,0,119,404,1,0,0,0,121,406,1,0,0,0,123,409,
        1,0,0,0,125,412,1,0,0,0,127,414,1,0,0,0,129,416,1,0,0,0,131,418,
        1,0,0,0,133,420,1,0,0,0,135,431,1,0,0,0,137,446,1,0,0,0,139,476,
        1,0,0,0,141,478,1,0,0,0,143,481,1,0,0,0,145,487,1,0,0,0,147,499,
        1,0,0,0,149,150,5,101,0,0,150,151,5,110,0,0,151,152,5,117,0,0,152,
        153,5,109,0,0,153,2,1,0,0,0,154,155,5,123,0,0,155,4,1,0,0,0,156,
        157,5,125,0,0,157,6,1,0,0,0,158,159,5,44,0,0,159,8,1,0,0,0,160,161,
        5,61,0,0,161,10,1,0,0,0,162,163,5,40,0,0,163,12,1,0,0,0,164,165,
        5,41,0,0,165,14,1,0,0,0,166,167,5,112,0,0,167,168,5,114,0,0,168,
        169,5,105,0,0,169,170,5,110,0,0,170,171,5,116,0,0,171,172,5,102,
        0,0,172,16,1,0,0,0,173,174,5,115,0,0,174,175,5,99,0,0,175,176,5,
        97,0,0,176,177,5,110,0,0,177,178,5,102,0,0,178,18,1,0,0,0,179,180,
        5,91,0,0,180,20,1,0,0,0,181,182,5,93,0,0,182,22,1,0,0,0,183,184,
        5,58,0,0,184,24,1,0,0,0,185,186,5,116,0,0,186,187,5,121,0,0,187,
        188,5,112,0,0,188,189,5,101,0,0,189,190,5,100,0,0,190,191,5,101,
        0,0,191,192,5,102,0,0,192,26,1,0,0,0,193,194,5,43,0,0,194,195,5,
        43,0,0,195,28,1,0,0,0,196,197,5,45,0,0,197,198,5,45,0,0,198,30,1,
        0,0,0,199,200,5,105,0,0,200,201,5,110,0,0,201,202,5,116,0,0,202,
        32,1,0,0,0,203,204,5,102,0,0,204,205,5,108,0,0,205,206,5,111,0,0,
        206,207,5,97,0,0,207,208,5,116,0,0,208,34,1,0,0,0,209,210,5,99,0,
        0,210,211,5,104,0,0,211,212,5,97,0,0,212,213,5,114,0,0,213,36,1,
        0,0,0,214,215,5,118,0,0,215,216,5,111,0,0,216,217,5,105,0,0,217,
        218,5,100,0,0,218,38,1,0,0,0,219,220,5,99,0,0,220,221,5,111,0,0,
        221,222,5,110,0,0,222,223,5,115,0,0,223,224,5,116,0,0,224,40,1,0,
        0,0,225,226,5,43,0,0,226,227,5,61,0,0,227,42,1,0,0,0,228,229,5,45,
        0,0,229,230,5,61,0,0,230,44,1,0,0,0,231,232,5,42,0,0,232,233,5,61,
        0,0,233,46,1,0,0,0,234,235,5,47,0,0,235,236,5,61,0,0,236,48,1,0,
        0,0,237,238,5,37,0,0,238,239,5,61,0,0,239,50,1,0,0,0,240,241,5,60,
        0,0,241,242,5,60,0,0,242,243,5,61,0,0,243,52,1,0,0,0,244,245,5,62,
        0,0,245,246,5,62,0,0,246,247,5,61,0,0,247,54,1,0,0,0,248,249,5,38,
        0,0,249,250,5,61,0,0,250,56,1,0,0,0,251,252,5,94,0,0,252,253,5,61,
        0,0,253,58,1,0,0,0,254,255,5,124,0,0,255,256,5,61,0,0,256,60,1,0,
        0,0,257,258,5,115,0,0,258,259,5,119,0,0,259,260,5,105,0,0,260,261,
        5,116,0,0,261,262,5,99,0,0,262,263,5,104,0,0,263,62,1,0,0,0,264,
        265,5,99,0,0,265,266,5,97,0,0,266,267,5,115,0,0,267,268,5,101,0,
        0,268,64,1,0,0,0,269,270,5,100,0,0,270,271,5,101,0,0,271,272,5,102,
        0,0,272,273,5,97,0,0,273,274,5,117,0,0,274,275,5,108,0,0,275,276,
        5,116,0,0,276,66,1,0,0,0,277,278,5,105,0,0,278,279,5,102,0,0,279,
        68,1,0,0,0,280,281,5,101,0,0,281,282,5,108,0,0,282,283,5,115,0,0,
        283,284,5,101,0,0,284,70,1,0,0,0,285,286,5,98,0,0,286,287,5,114,
        0,0,287,288,5,101,0,0,288,289,5,97,0,0,289,290,5,107,0,0,290,72,
        1,0,0,0,291,292,5,114,0,0,292,293,5,101,0,0,293,294,5,116,0,0,294,
        295,5,117,0,0,295,296,5,114,0,0,296,297,5,110,0,0,297,74,1,0,0,0,
        298,299,5,99,0,0,299,300,5,111,0,0,300,301,5,110,0,0,301,302,5,116,
        0,0,302,303,5,105,0,0,303,304,5,110,0,0,304,305,5,117,0,0,305,306,
        5,101,0,0,306,76,1,0,0,0,307,308,5,119,0,0,308,309,5,104,0,0,309,
        310,5,105,0,0,310,311,5,108,0,0,311,312,5,101,0,0,312,78,1,0,0,0,
        313,314,5,102,0,0,314,315,5,111,0,0,315,316,5,114,0,0,316,80,1,0,
        0,0,317,318,5,59,0,0,318,82,1,0,0,0,319,328,5,48,0,0,320,324,7,0,
        0,0,321,323,7,1,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,0,
        0,0,324,325,1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,327,319,1,0,
        0,0,327,320,1,0,0,0,328,84,1,0,0,0,329,331,7,1,0,0,330,329,1,0,0,
        0,331,332,1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,334,1,0,0,
        0,334,338,5,46,0,0,335,337,7,1,0,0,336,335,1,0,0,0,337,340,1,0,0,
        0,338,336,1,0,0,0,338,339,1,0,0,0,339,348,1,0,0,0,340,338,1,0,0,
        0,341,343,5,46,0,0,342,344,7,1,0,0,343,342,1,0,0,0,344,345,1,0,0,
        0,345,343,1,0,0,0,345,346,1,0,0,0,346,348,1,0,0,0,347,330,1,0,0,
        0,347,341,1,0,0,0,348,86,1,0,0,0,349,353,7,2,0,0,350,352,7,3,0,0,
        351,350,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,
        354,88,1,0,0,0,355,353,1,0,0,0,356,357,5,39,0,0,357,358,7,4,0,0,
        358,359,5,39,0,0,359,90,1,0,0,0,360,368,5,39,0,0,361,362,5,92,0,
        0,362,369,5,110,0,0,363,364,5,92,0,0,364,369,5,116,0,0,365,366,5,
        92,0,0,366,369,5,48,0,0,367,369,9,0,0,0,368,361,1,0,0,0,368,363,
        1,0,0,0,368,365,1,0,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,371,
        5,39,0,0,371,92,1,0,0,0,372,373,5,43,0,0,373,94,1,0,0,0,374,375,
        5,45,0,0,375,96,1,0,0,0,376,377,5,42,0,0,377,98,1,0,0,0,378,379,
        5,47,0,0,379,100,1,0,0,0,380,381,5,37,0,0,381,102,1,0,0,0,382,383,
        5,62,0,0,383,104,1,0,0,0,384,385,5,60,0,0,385,106,1,0,0,0,386,387,
        5,61,0,0,387,388,5,61,0,0,388,108,1,0,0,0,389,390,5,62,0,0,390,391,
        5,61,0,0,391,110,1,0,0,0,392,393,5,60,0,0,393,394,5,61,0,0,394,112,
        1,0,0,0,395,396,5,33,0,0,396,397,5,61,0,0,397,114,1,0,0,0,398,399,
        5,38,0,0,399,400,5,38,0,0,400,116,1,0,0,0,401,402,5,124,0,0,402,
        403,5,124,0,0,403,118,1,0,0,0,404,405,5,33,0,0,405,120,1,0,0,0,406,
        407,5,60,0,0,407,408,5,60,0,0,408,122,1,0,0,0,409,410,5,62,0,0,410,
        411,5,62,0,0,411,124,1,0,0,0,412,413,5,38,0,0,413,126,1,0,0,0,414,
        415,5,124,0,0,415,128,1,0,0,0,416,417,5,94,0,0,417,130,1,0,0,0,418,
        419,5,126,0,0,419,132,1,0,0,0,420,426,5,34,0,0,421,425,3,135,67,
        0,422,425,3,137,68,0,423,425,8,5,0,0,424,421,1,0,0,0,424,422,1,0,
        0,0,424,423,1,0,0,0,425,428,1,0,0,0,426,424,1,0,0,0,426,427,1,0,
        0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,430,5,34,0,0,430,134,1,0,
        0,0,431,444,5,92,0,0,432,445,7,6,0,0,433,434,5,117,0,0,434,435,3,
        141,70,0,435,436,3,141,70,0,436,437,3,141,70,0,437,438,3,141,70,
        0,438,445,1,0,0,0,439,440,5,120,0,0,440,441,3,141,70,0,441,442,3,
        141,70,0,442,445,1,0,0,0,443,445,3,139,69,0,444,432,1,0,0,0,444,
        433,1,0,0,0,444,439,1,0,0,0,444,443,1,0,0,0,445,136,1,0,0,0,446,
        450,5,37,0,0,447,449,7,7,0,0,448,447,1,0,0,0,449,452,1,0,0,0,450,
        448,1,0,0,0,450,451,1,0,0,0,451,456,1,0,0,0,452,450,1,0,0,0,453,
        455,7,1,0,0,454,453,1,0,0,0,455,458,1,0,0,0,456,454,1,0,0,0,456,
        457,1,0,0,0,457,465,1,0,0,0,458,456,1,0,0,0,459,461,5,46,0,0,460,
        462,7,1,0,0,461,460,1,0,0,0,462,463,1,0,0,0,463,461,1,0,0,0,463,
        464,1,0,0,0,464,466,1,0,0,0,465,459,1,0,0,0,465,466,1,0,0,0,466,
        467,1,0,0,0,467,468,7,8,0,0,468,138,1,0,0,0,469,470,7,9,0,0,470,
        471,7,10,0,0,471,477,7,10,0,0,472,474,7,10,0,0,473,475,7,10,0,0,
        474,473,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,469,1,0,0,0,
        476,472,1,0,0,0,477,140,1,0,0,0,478,479,7,11,0,0,479,142,1,0,0,0,
        480,482,7,12,0,0,481,480,1,0,0,0,482,483,1,0,0,0,483,481,1,0,0,0,
        483,484,1,0,0,0,484,485,1,0,0,0,485,486,6,71,0,0,486,144,1,0,0,0,
        487,488,5,47,0,0,488,489,5,47,0,0,489,493,1,0,0,0,490,492,9,0,0,
        0,491,490,1,0,0,0,492,495,1,0,0,0,493,494,1,0,0,0,493,491,1,0,0,
        0,494,497,1,0,0,0,495,493,1,0,0,0,496,498,7,13,0,0,497,496,1,0,0,
        0,498,146,1,0,0,0,499,500,5,47,0,0,500,501,5,42,0,0,501,505,1,0,
        0,0,502,504,9,0,0,0,503,502,1,0,0,0,504,507,1,0,0,0,505,506,1,0,
        0,0,505,503,1,0,0,0,506,508,1,0,0,0,507,505,1,0,0,0,508,509,5,42,
        0,0,509,510,5,47,0,0,510,148,1,0,0,0,22,0,324,327,332,338,345,347,
        353,368,424,426,444,450,456,463,465,474,476,483,493,497,505,1,6,
        0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    SWITCH = 31
    CASE = 32
    DEFAULT = 33
    IF = 34
    ELSE = 35
    BREAK = 36
    RETURN = 37
    CONTINUE = 38
    WHILE = 39
    FOR = 40
    TERMINAL = 41
    NUMBER = 42
    FLOAT = 43
    ID = 44
    CHAR = 45
    CHAR_ESC = 46
    PLUS = 47
    MINUS = 48
    MUL = 49
    DIV = 50
    MOD = 51
    GT = 52
    LT = 53
    EQ = 54
    GE = 55
    LE = 56
    NE = 57
    AND = 58
    OR = 59
    NOT = 60
    LSHIFT = 61
    RSHIFT = 62
    BITAND = 63
    BITOR = 64
    BITXOR = 65
    BITNOT = 66
    STRING_LITERAL = 67
    WS = 68
    SINGLE_LINE_COMMENT = 69
    MULTI_LINE_COMMENT = 70

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'enum'", "'{'", "'}'", "','", "'='", "'('", "')'", "'printf'", 
            "'scanf'", "'['", "']'", "':'", "'typedef'", "'++'", "'--'", 
            "'int'", "'float'", "'char'", "'void'", "'const'", "'+='", "'-='", 
            "'*='", "'/='", "'%='", "'<<='", "'>>='", "'&='", "'^='", "'|='", 
            "'switch'", "'case'", "'default'", "'if'", "'else'", "'break'", 
            "'return'", "'continue'", "'while'", "'for'", "';'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'>'", "'<'", "'=='", "'>='", "'<='", 
            "'!='", "'&&'", "'||'", "'!'", "'<<'", "'>>'", "'&'", "'|'", 
            "'^'", "'~'" ]

    symbolicNames = [ "<INVALID>",
            "SWITCH", "CASE", "DEFAULT", "IF", "ELSE", "BREAK", "RETURN", 
            "CONTINUE", "WHILE", "FOR", "TERMINAL", "NUMBER", "FLOAT", "ID", 
            "CHAR", "CHAR_ESC", "PLUS", "MINUS", "MUL", "DIV", "MOD", "GT", 
            "LT", "EQ", "GE", "LE", "NE", "AND", "OR", "NOT", "LSHIFT", 
            "RSHIFT", "BITAND", "BITOR", "BITXOR", "BITNOT", "STRING_LITERAL", 
            "WS", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "SWITCH", "CASE", 
                  "DEFAULT", "IF", "ELSE", "BREAK", "RETURN", "CONTINUE", 
                  "WHILE", "FOR", "TERMINAL", "NUMBER", "FLOAT", "ID", "CHAR", 
                  "CHAR_ESC", "PLUS", "MINUS", "MUL", "DIV", "MOD", "GT", 
                  "LT", "EQ", "GE", "LE", "NE", "AND", "OR", "NOT", "LSHIFT", 
                  "RSHIFT", "BITAND", "BITOR", "BITXOR", "BITNOT", "STRING_LITERAL", 
                  "EscapeSequence", "FormatSpecifier", "OctalEscape", "HexDigit", 
                  "WS", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


